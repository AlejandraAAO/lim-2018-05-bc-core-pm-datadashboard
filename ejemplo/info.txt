--------------------->orden de los jsprimero mainjsdespues data<--------------------------
http = protocolo reglas, va a ver con la comunicacion cliente-servidor;
tener un index.html es el protocolo para el http. si no lo encuentra envia un codigo 400 
si lo encuentra sale codigo 200.
tcp/ip: protocolo funcional para el internet.

                 request
         -------------------------->
computadora                         servidor (json)
        <------------------------
                 response

para pedir request/response : se puede usar js
solicitud atraves de un navegador
AJAX = asincrono con json 
JSON = formatos para estructurar data.
para peticionees xmlhhtprequest, solicito atraves de una url

                ¿COMO?
1. levantar un servidor desde mi maquina.
plugin en studio code : live server
node.js tbm levanta servidor.
voy a hacer un request con xmlhhtprequest.

2. como hacer una peticion : 
compatibilidad: con httprequest(antigua) o fetch(masrapidoymenoslineas)
diferenciados por la sintaxis

const  XHR =? XMLHTTPREQUEST()
CONSOLE.LOG(XHR);
XHR.ONREADY STATECHANGE = FUNCTION(){ // valida q el dom este cargado y lo encuentra en el servidor

if (xhr.readystate ==4 &&xhr.status ==200){    //200 cargo bien la pagina del http y lo encontro
        console.log(json.parse (xhr.responsetext));  // un parse de la respuesta(aseguramos q lo q traiga del servido sea formato json)
        console.log(xhr.res)
} else {
        console.log(hay un problem con el server)
}
xhr.open("get", urlblablabla);
xhr.serd();

// INFO//
DOMCONTENTLOADED abarca 3 eventos 
carga css y js porque son externmos
imagenes
....
cuando este todo cargado todo. cuando esta todo cargado tiene un valor de 4
caniuse.com  : herramienta para saber q cosa se utiliza en que
4. en mainjs

fetch ("url data del data/cohor.json" )
        .then(function(response){
        return response.json();
        })
        .then(function(data){
        console.log(typeof data);
        console.log(data[0].id)
        });

3.5. recorrer objetos y arrays
si el nombre q ingresa es igual a mi data 


----------->los cohorts<------------------------ API

const get data = (url) =>{
        fetch(url)
        .then ((response) =>
                response.json()
        )
        .then ((cohorts) =>
                console.log(cohorts);
                for (cohort of cohorts){ //
                document.getElementById("tabla").innerhtml *= cohort.id * "<br/>"
                debugger //ver parte por parte
        })
        .catch((er) =>{
                console.log (err);
        });
        };
get data = ("api de laboratoria")

-------------->nombre de estudiantes<------------------
const get data = (url) =>{
        fetch(url)
        .then ((response) =>
                response.json()
        )
        .then ((students) =>
                console.log(students);
                for (student of students){ //
                document.getElementById("tabla").innerhtml += student.name * "<br/>"
                //debugger //ver parte por parte
        })
        .catch((er) =>{
                console.log (err);
        });
        };


let userData = {
        users:students,
        progress : studentsProgrress
}
let options = {
        cohort : cohortsList,
        cohortData : cohortData,
        ..
}
let userstoPrint = processCohortData(options)
showUInTable(userstoPrint);

const processCohortData = (options) => {
        let users = options.cohortData.users;
        let progress = options.cohortData.progress
        let usersWithGrades = computeUsersStates(users,progress,courses);
}

1- necesita cargar la lista de cohorts
al seleccionar unos
llamar a las estudiantes
llamar sus progressos

-------------->añadir o quitar clases<------------------show/hide para ocultarymostrar sin css

const butdeclass = documentgetelementbyid(button);
const saludo = documentgetelementebyid();
butdeclass.addeventlistener("click", ()=>{
        
})

------------------>objetc.keys<----------------
const equipos = {
        rusia:{jugadores:11},
        peru:{jugadores:11}
}
console.log(equipos);

object.keys(equipos);//me devuelve el arreglo de las llaves del objeto
->["rusia","peru"]

for(key of keys){
        console.log(key);
}
->

for(key of keys){
        console.log(equipos[key]);
        for (let property in equipos[key]){
                console.log(property);
        }
}
->jugadores:11
  jugadore:11

--->for in es para iterar sobre las propiedades de los objetos sin utilizar el objet keys<-----
------->mostrar cohort funcion en MAIN.JS
mostrar cohort = boton 
processCohortData convoca a las otras 3 funciones

boton para seleccionar cohort 
const buttonselectcohort = document...
const buttonselectcohort =documeny..
c


 //llamadas
        const SELECTEDcohhortDATA = {id:"lim",courses : ["intro"]};
        const usersDATA = [{id : 1001, name: gonza},{id:1002, name="gabi"}];
        const userprogressDATA={1001 : {exercises:1},1002:{exercises:0}};

buttonaddclasss.addeventlistener (click, () =>{
        saludo.classlist.add("class2");
        saludo.cllassList.remove("class1");
});

buttonselectcohort.addeventlistener(click, ()=>{
        let options ={
                cohort : SELECTEDCOHORTDATA, 
                cohortdata:{
                        users:usersdata,
                        progress:userprogresdata
                        }
                        };
        
        let userwithStats = processCohortData(options);
        saludo.innerthtml = userwithststs[0].name * "con porcentaje"+ userwithstats
        CONSOLE.LOG(userwithStats);
})

----->EN DATA.JS
const processCohortData = (OPTION) =>{
        CONSOLE.LOG(ENTRE A PROCESSCOHORTDATA);
        consolo.log(options);

        let computedData = computeusersstats(options.cohortdata.users, {},[]); //llamo la funcion
        let sortedData = sortusers(computedData, "",""); //llamo la funcion
        return computedData;

}

const computeusersstaats = (users,progres,courses) =<{
        console.log(entre a computeusersstat);
        let stats ={percent:100, exercises : {total:0}}
        user[1].stats = stats;
        user[2].stats = stats;
        //stats.percent = 100
        return [user[1],user[0], {},{}];
};
const sortUsrs =(users,orderby,orderdirection){
    console.log(entre a sortusers);
    return [users[1],users[0]];
}
--------->select<----------
<select id="activityselector">
        <option>lim</option>
        <option>scl</option>

const activities=document....;
activities.addeventlistener(onchange,(e) =>{
        console.log(e.target.selectedIndex);
})
-------------------->CSS<-----------
en el header 90px ---->body ponerle un padding top :90px
para q el header se mantenla la posicion al bajar en la pagina

header{
position: fixed;
top: 0;
left: 0;
rigth: 0;
}
/*  lista completa de los readyStatevalores está documentada en XMLHTTPRequest.readyState y es la siguiente:
0 (sin inicializar) o ( solicitud no inicializada )
1 (carga) o ( conexión al servidor establecida )
2 (cargado) o ( solicitud recibida )
3 (interactivo) o ( solicitud de procesamiento )
4 (completo) o ( solicitud finalizada y la respuesta está lista )
*/ 
---------->for each y for<-----------
/* ----------------> USANDO ForEACH <----------
               let html = "";
                data.forEach(function(names){
                    html +=`
                    <li>${names.name}</li>`;
                })
             listStudents.innerHTML = html;*/
            /*-------------------->USANDO for <-----------
             for(let i=0; i<data.length; i++){
                    let students = document.createElement("li");
                    students.innerHTML = data[i].name + " ";
                    listStudents.appendChild(students);
                }*/
                //document.write("1. "+ data[0].name + " ");
                //document.write("2. "+data[1].name); 

 /*------------->FOREACH
        promo.forEach(function(names){
            cohortname +=`
            <option>${names.id}</option>`;
        })*/
        /*for (let i = 0; i<promo.length; i++ ){
            const options = document.createElement("option");
            const containOp = document.createTextNode(promo[i].id);
            options.appendChild(containOp);
            console.log(promo[i].id);
            menu.appendChild(options);

        }*/